# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson
'.source.python':
  'Encoding Declaration':
    'prefix': 'coding-declaration-utf8'
    'body': '# -*- coding:utf-8 -*-'

  'Make Entry Point':
    'prefix': 'if__name__=="__main__"'
    'body': """
if __name__ == "__main__":
	$1
"""

# Input
  'Int-Input':
    'prefix': 'int_input'
    'body': 'int(input())'

  'List-Int-Input':
    'prefix': 'list_int_input'
    'body': 'list(map(int, input().split()))'

# Make List
  'Make 2d-list':
    'prefix': 'make_2dlist'
    'body': """
def make_2dlist(N, M, v=0):
    return [[v for m in range(M)] for n in range(N)]
"""

# Make array
  'Make 2d-array':
    'prefix': 'make_2darray'
    'body': """
def make_2darray(N, M, v=0):
    \""" Return array[N][M]
    [args]
      v: initial values
    [*Required*]
      import numpy as np
    \"""
    import numpy as np
    return np.array([[v for m in range(M)] for n in range(N)])
"""
