# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson
'.source.python':
# rules
    # imethod: instance method
    # cmethod: class method

# common
    'Encoding Declaration':
        'prefix': 'coding-declaration-utf8'
        'body': '# -*- coding:utf-8 -*-'

    'Make Entry Point':
        'prefix': 'if__name__=="__main__"'
        'body': """
        if __name__ == "__main__":
            $1
        """


# Input
    'Int-Input':
        'prefix': 'int_input'
        'body': 'int(input())'

    'List-Int-Input':
        'prefix': 'list_int_input'
        'body': 'list(map(int, input().split()))'

# Built-in function
    'abs':
        # 絶対値を返す
        # print(abs(-10)) --> 10
        # print(abs(-10.0)) --> 10.0
        # print(abs(6j)) --> 6.0
        # print(abs(3+1j)) --> 3.1622776601683795
        'prefix': 'abs'
        'body': 'abs(${1:x})'

    'all':
        # iterable のすべての要素がTrue（または空）ならばTrueを返す
        # all([True, True, True]) --> True
        # all([]) --> True
        # all(['Alice', 'Bob', 'Charlie']) --> True
        # all([24, 0, 18]) --> False
        'prefix': 'all'
        'body': 'all(${1:iterable})'

    'any':
        # iterable のいずれかの要素がTrueならばTrueを返す。空ならFalseを返す
        # any([True, False, False]) --> True
        # any([]) --> False
        # any(['Alice', 'Bob', 'Charlie']) --> True
        # any([24, 0, 18]) --> True
        'prefix': 'any'
        'body': 'any(${1:iterable})'

    'ascii':
        # オブジェクトの印字可能な表現を含む文字列を返すが、repr() によって返された
        # 文字列中の非 ASCII 文字は \x 、 \u 、 \U エスケープを使ってエスケープされる
        # ascii("aiueo") --> 'aiueo'  (実際に'が付くので注意)
        # ascii("あいうえお") --> '\u3042\u3044\u3046\u3048\u304a'
        'prefix': 'ascii'
        'body': 'ascii(${object})'

    'bin':
        # 整数を先頭に "0b" が付いた 2 進文字列に変換する。
        # 0b11 --> 3
        # bin(3) --> 0b11
        # bin(-3) --> -0b11
        # bin(3.0) --> TypeError
        'prefix': 'bin'
        'body': 'bin(${x})'

    'oct':
        # 整数を先頭に "0o" が付いた 8 進数文字列に変換する。
        # 0o11 --> 9
        # oct(9) --> 0o11
        # oct(-9) --> -0o11
        # oct(9.0) --> TypeError
        'prefix': 'oct'
        'body': 'oct(${x})'

    'hex':
        # 整数を先頭に "0x" が付いた 16 進数文字列に変換する。
        # 0x11 --> 17
        # hex(17) --> 0x11
        # hex(-17) --> -0x11
        # hex(17.0) --> TypeError
        'prefix': 'hex'
        'body': 'hex(${x})'

    'chr':
        # Unicode コードポイントが整数 i である文字を表す文字列を返す
        # 引数の有効な範囲は 0 ～ 1,114,111 (0x10FFFF) です
        # i が範囲外の場合 ValueError が送出されます
        # chr(97) --> 'a'
        # chr(8364) --> '€'
        'prefix': 'chr'
        'body': 'chr(${i})'

    'zip':
        # それぞれの iterable から要素を集めたイテレータを作成する
        # zip([1,2,3], [4,5,6]) --> (1,4) (2,5) (3,6)
        # zip([1,2,3], [4,5]) --> (1,4) (2,5)
        # zip([1,2,3], [4,5,6], [7,8,9]) --> (1,4,7) (2,5,8) (3,6,9)
        'prefix': 'zip'
        'body': 'zip(${*iterables})'

    '@classmethod':
        # メソッドをクラスメソッドへ変換するデコレータ
        # インスタンスメソッドが暗黙の第一引数としてインスタンスをとるように、
        # 第一引数としてクラスをとります。
        # class C:
        #     @classmethod
        #     def func(cls, arg1, arg2, ...): ...
        'prefix': 'classmethod'
        'body': '@classmethod'


# math
    '階乗計算':
        'prefix': 'kaijou'
        'body': 'math.factorial(${n})'

    'math_factorial（階乗計算）':
        # n! = n * (n-1) * ... * 1
        'prefix': 'math_factorial'
        'body': 'math.factorial(${n})'


# list
    '2次元リストを作成する':
        # [[0 for m in range(3)] for n in range(2)]
        #   --> [[0,0,0], [0,0,0]]
        'prefix': 'list_2d'
        'body': '${1:list} = [[0 for m in range(${2:M})] for n in range(${3:N})]'


# np
    # import numpy as np

    '2次元のndarray行列を作成する':
        # np.array([[0 for m in range(3)] for n in range(2)])
        #   --> [[0 0 0]
        #        [0 0 0]]
        'prefix': 'np_array_2d'
        'body': '${1:array} = np.array([[0 for m in range(${2:M})] for n in range(${3:N})]]'

    '2次元のmat行列を作成する':
        # np.mat([[0 for m in range(3)] for n in range(2)])
        #   --> [[0 0 0]
        #        [0 0 0]]
        'prefix': 'np_matrix_2d'
        'body': '${1:mat} = np.mat([[0 for m in range(${2:M})] for n in range(${3:N})]]'

# sort
    'sort dictionary(key ascending)':
        # 辞書のkeyで昇順ソートし、リストで返す
        # d = {"apple":1, "cheese":2, "bread":3, "donut": 4}
        # sorted(d.items(), key=lambda x: x[0])
        #   --> [('apple', 1), ('bread', 3), ('cheese', 2), ('donut', 4)]
        'prefix': 'sorted_dict_key_ascending'
        'body': '${1:list} = sorted(${2:dict}.items(), key=lambda x: x[0])'

    'sort dictionary(key descending)':
        # 辞書のkeyで降順ソートし、リストで返す
        # d = {"apple":1, "cheese":2, "bread":3, "donut": 4}
        # sorted(d.items(), key=lambda x: x[0], reverse=True)
        #   --> [('donut', 4), ('cheese', 2), ('bread', 3), ('apple', 1)]
        'prefix': 'sorted_dict_key_descending'
        'body': '${1:list} = sorted(${2:dict}.items(), key=lambda x: x[0], reverse=True)'

    'sort dictionary(velue ascending)':
        # 辞書のvalueで昇順ソートし、リストで返す
        # d = {"apple":1, "cheese":2, "bread":3, "donut": 4}
        # sorted(d.items(), key=lambda x: x[1])
        #   --> [('apple', 1), ('cheese', 2), ('bread', 3), ('donut', 4)]
        'prefix': 'sorted_dict_value_ascending'
        'body': '${1:list} = sorted(${2:dict}.items(), key=lambda x: x[1])'

    'sort dictionary(value descending)':
        # 辞書のvalueで降順ソートし、リストで返す
        # d = {"apple":1, "cheese":2, "bread":3, "donut": 4}
        # sorted(d.items(), key=lambda x: x[1], reverse=True)
        #   --> [('donut', 4), ('bread', 3), ('cheese', 2), ('apple', 1)]
        'prefix': 'sorted_dict_value_descending'
        'body': '${1:list} = sorted(${2:dict}.items(), key=lambda x: x[1], reverse=True)'

# itertools
    # https://docs.python.jp/3/library/itertools.html#module-itertools

    'itertools.count':
        # 数startで始まる等間隔の値を返すイテレータを作成する
        # count(10) --> 10 11 12 13 14 ...
        # count(2.5, 0.5) --> 2.5 3.0 3.5 ...
        'prefix': 'itertools_count'
        'body': 'itertools.count(${1:start=0}, ${2:step=1})'

    'itertools.cycle':
        # iterableから要素を取得し、無限に返すイテレータを作成する
        # cycle('ABCD') --> A B C D A B C D A B C D ...
        'prefix': 'itertools_cycle'
        'body': 'itertools.cycle(${1:iterable})'

    'itertools.repeat':
        # 繰り返しobjectを返すイテレータを、times回作成する
        # repeat(10, 3) --> 10 10 10
        # repeat(['a', 'b', 'c']) --> ['a', 'b', 'c'], ['a', 'b', 'c'], ...
        # list(map(pow, range(10), repeat(2))) --> [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
        'prefix': 'itertools_repeat'
        'body': 'itertools.repeat(${1:object}, ${2:times=None})'

    'itertools.accumulate':
        # 累積結果を返すイテレータを作成する
        # func引数のデフォルトは+演算の関数。つまりここにoperator.mulを渡せば*演算になる
        # accumulate([1,2,3,4,5]) --> 1 3 6 10 15
        # accumulate([1,2,3,4,5], operator.mul) --> 1 2 6 24 120
        'prefix': 'itertools_accumulate'
        'body': 'itertools.accumulate(${1:iterable}, ${2:func=operator.add})'

    'itertools.chain':
        # 先頭の iterable の全要素を返し、次に2番目を返し、と
        # 全 iterable の要素を返すイテレータを作成する
        # chain('ABC', 'DEF') --> A B C D E F
        'prefix': 'itertools_chain'
        'body': 'itertools.chain(${1:iterables})'

    'cmethod: itertools.chain.from_iterable':
        # リストを渡せば、chain()と同等のことをする
        # chain.from_iterable(['ABC', 'DEF']) --> A B C D E F
        'prefix': 'itertools_chain_from_iterable'
        'body': 'itertools.chain.from_iterable(${1:iterable})'

    'itertools.compress':
        # data の要素から selectors の対応する要素が True と評価されるものだけを
        # フィルタしたイテレータを作る。
        # data と selectors のいずれかが尽きたときに止まる。
        # compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F
        'prefix': 'itertools_compress'
        'body': 'itertools.compress(${1:data}, ${2:selectors})'

    'itertools.takewhile':
        # predicate（述語）がTrueである限りiterableから要素を返すイテレータを作成する
        # takewhile(lambda x: x<5, [1, 4, 6, 4, 1]) --> 1 4
        'prefix': 'itertools_takewhile'
        'body': 'itertools.takewhile(${1:predicate}, ${2:iterable})'

    'itertools.dropwhile':
        # predicateが最初にFalseになるその後のすべての要素を
        # 返すイテレータを作成する
        # dropwhile(lambda x: x<5, [1, 4, 6, 4, 1]) --> 6 4 1
        'prefix': 'itertools_dropwhile'
        'body': 'itertools.dropwhile(${1:predicaet}, ${2:iterable})'

    'itertools.filterfalse':
        # predicateがFalseとなる要素だけを返すイテレータを作成する
        # filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8
        'prefix': 'itertools_filterfalse'
        'body': 'itertools.filterfalse(${1:predicate}, ${2:iterable})'

    'itertools.groupby':
        # 同じkeyを持つ要素からなるiterable中のグループに対して、
        # keyとグループを返すイテレータを作成する
        # s = 'AAAABBBCCDAABBB'
        # [k for k, g in groupby(s)] --> 'A' 'B' 'C' 'D' 'A' 'B'
        # [list(g) for k, g in groupby(s)] --> ['A','A','A','A'] ['B','B','B'] ['C','C'] ['D']
        'prefix': 'itertools_groupby'
        'body': 'itertools.groupby(${1:iterable}, ${2:key=None})'

    'itertools.islice':
        # s = "ABCDEFG"
        # islice(s, 2) --> 'A' 'B'
        # islice(s, 2, 4) --> 'C' 'D'
        # islice(s, 2, None) --> 'C' 'D' 'E' 'F' 'G'
        # islice(s, 0, None, 2) --> 'A' 'C' 'E' 'G'
        'prefix': 'itertools_islice'
        'body': 'itertools.islice(${1:iterable}, ${2:start}, ${3:stop}, ${4:step=None})'

    'itertools.starmap':
        # iterableの要素を引数としてfunctionを計算するイテレータを作成する
        # mapとstarmapの違いは、function(a, b)とfunction(*c)の差に似ている
        # starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000
        'prefix': 'itertools_starmap'
        'body': 'itertools.starmap(${1:function}, ${2:iterable})'

    'itertools.tee':
        # 一つのiterableからn個の独立したイテレータを返す
        # tee("ABC", 3) --> ['A','B','C'], ['A','B','C'], ['A','B','C']
        'prefix': 'itertools_tee'
        'body': 'itertools.tee(${1:iterable}, ${2:n=2})'

    'itertools.zip_longest':
        # 各iterableの要素をまとめるイテレータを作成する
        # iterableの長さが違う場合、足りない値はfillvalueで埋める
        # zip_longest('ABCD', 'xy', fillvalue='-') --> ('A','x') ('B','y') ('C','-') ('D','-')
        'prefix': 'itertools_zip_longest'
        'body': 'itertools.zip_longest(${1:iterable}, ${2:fillvalue=None})'

    'itertools.combinations':
        # nCr := n! / r!(n-r)!
        # いわゆる組み合わせのパターンを返す
        # 入力iterableの要素からなる長さrの部分列を返す
        # combinations('ABCD', 2) --> ('A','B') ('A','C') ('A','D') ('B','C') ('B','D') ('C','D')
        # combinations(range(4), 3) --> (0,1,2) (0,1,3) (0,2,3) (1,2,3)
        'prefix': 'itertools_combinations'
        'body': 'itertools.combinations(${1:iterable}, ${2:r})'

    'itertools.combinations_with_replacement':
        # 重複ありの組み合わせパターンを返す
        # 入力 iterable から、それぞれの要素が複数回現れることを許して、長さ r の要素の部分列を返します。
        # combinations_with_replacement('ABCD', 2) --> ('A','A') ('A','B') ('A','C') ('A','D') ('B','B') ('B','C') ('B','D') ('C','C') ('C','D') ('D','D')
        'prefix': 'itertools_combinations_with_replacement'
        'body': 'itertools.combinations_with_replacement(${1:iterable}, ${2:r})'

    'itertools.permutations(順列)':
        # 順列の公式: nPk = n!/(n-k)!
        # iterableの要素からなる長さrの順列を連続的に返す
        # permutations('ABCD', 2) --> ('A','B') ('A','C') ('A','D') ('B','A') ('B','C') ('B','D') ('C','A') ('C','B') ('C','D') ('D','A') ('D','B') ('D','C')
        # permutations(range(3)) --> (0,1,2) (0,2,1) (1,0,2) (1,2,0) (2,0,1) (2,1,0)
        'prefix': 'itertools_permutations'
        'body': 'itertools.permutations(${1:iterable}, ${2:r=None})'

    'itertools.product(重複順列・デカルト積)':
        # iterableのデカルト積を返す
        # product('ABCD', 'xy')
        #   --> ('A','x') ('A','y') ('B','x') ('B','y') ('C','x') ('C','y') ('D','x') ('D','y')
        # product(range(2), repeat=3)
        #   --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) (1,0,1) (1,1,0) (1,1,1)
        'prefix': 'itertools_product'
        'body': 'itertools.product(${1:iterable}, ${2:repeat=1})'


# collections
    # https://docs.python.jp/3/library/collections.html

    'class: collections.Counter()':
        # https://docs.python.jp/3/library/collections.html#collections.Counter
        # key:要素、value:カウント数、の辞書を作成する
        # collections.Counter("aabcd")
        # collections.Counter(['a','a','b','c','d'])
        #   --> {'a': 2, 'b': 1, 'c': 1, 'd': 1}
        'prefix': 'collections_Counter'
        'body': """
            ${1:dict} = collections.Counter(${2:iterable-or-mapping})
        """

    'imethod: collections_Counter().elements()':
        # それぞれの要素を、そのカウント分の回数だけ繰り返すイテレータを返す
        # c = Counter(a=4, b=2, c=0, d=-2)
        # sorted(c.elements())
        #   --> ['a', 'a', 'a', 'a', 'b', 'b']
        'prefix': 'collections_Counter_elements'
        'body': '${1:collections.Counter()}.elements()'

    'imethod: collections.Counter().most_common()':
        # 最も多い n 要素を、カウントが多いものから順に並べたリストを返す
        # Counter('abracadabra').most_common(3)
        #   --> [('a', 5), ('r', 2), ('b', 2)]
        'prefix': 'collections_Counter_most_common'
        'body': '${1:collections.Counter()}.most_common(${2:n})'

    'imethod: collections.Counter().subtract()':
        # 要素から iterable または mapping の要素が引かれる。
        # c1 = Counter(a=4, b=2, c=0, d=-2)
        # c2 = Counter(a=1, b=2, c=3, d=4)
        # c1.subtract(c2)
        #   --> Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})
        'prefix': 'collections_Counter_subtract'
        'body': '${1:collections.Counter()}.subtract(${2:iterable-or-mapping})'

# timeit
    # https://docs.python.jp/3.6/library/timeit.html#module-timeit

    'timeit.timeit':
        # timeit.timeit(stmt='pass', setup='pass', timer=<default timer>, number=1000000, globals=None)
        # 与えられたstmt、setup コードおよび timer 関数で Timer インスタンスを作成し、
        # その timeit() メソッドを number 回実行します。
        # 任意の globals 引数はコードを実行する名前空間を指定します。
        # def test(N):
        #     return sum(range(N))
        # n = 10000
        # loop = 1000
        # result = timeit.timeit('test(n)', globals=globals(), number=loop)
        # print(result / loop) --> 0.0002666301020071842
        'prefix': 'timeit_timeit'
        'body': """
            timeit.timeit(stmt=${1:'pass'}, setup=${2:'pass'}, timer=${3:<default timer>}, number=${4:1000000}, globals=${5:None})
        """

#####################################################################
# PHP
#####################################################################
'.text.html.basic, .text.html.php':
    'php_error_log':
        'prefix': 'error_log'
        'body': 'error_log(print_r($array,true),"3","/var/log/php_debug.log");'
